import numpy as np

class LinearRegression:
    def __init__(self):
        self.weights = None

    def fit(self, X, y):
        # Add bias term (column of 1s) to input X
        X_b = np.c_[np.ones((X.shape[0], 1)), X]  # shape: (n_samples, 2)
        
        # Normal Equation: (X^T X)^-1 X^T y
        self.weights = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)

    def predict(self, X):
        # Add bias term to X
        X_b = np.c_[np.ones((X.shape[0], 1)), X]
        return X_b.dot(self.weights)

    def get_params(self):
        return {'intercept': self.weights[0], 'slope': self.weights[1:]}

# Example usage
if __name__ == "__main__":
    # Sample data
    X = np.array([[1], [2], [4], [3], [5]])
    y = np.array([1, 3, 3, 2, 5])

    # Train model
    model = LinearRegression()
    model.fit(X, y)

    # Predict
    predictions = model.predict(X)

    print("Predictions:", predictions)
    print("Parameters:", model.get_params())
